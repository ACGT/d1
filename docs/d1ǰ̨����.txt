1：操作系统、构架选型
64位Linux、Java、apache、resin、ant、memcached
UNIX操作系统版本
IBM AIX
Oracle Solaris 
Redhat
Debian
ubuntu 等等
参看 http://baike.baidu.com/view/897468.htm


2：web服务器
apache，http://www.apache.org/组织下的开源项目，一款老牌经典web服务器，本人一直用apache+resin。
lighttpd/lightty，http://www.lighttpd.net/，一个德国人写的高速web服务器，用来做静态文件服务器特别好，有mod_memcache模块，单服务器能支撑1G/s的流量。
nginx(念engine X)，http://www.nginx.org/，一个俄罗斯人写的高速web服务器，可以用来做负载均衡，代替apache也没问题。
weblogic，被oracle收购了，商业应用的服务器，银行、证券行业才可能用，没见过电商用weblogic的，淘宝都不用。
websphere，IBM的产品，商业软件。
IIS，微软的产品。


3：Java应用服务器（JDK有sun的Jdk和weblogic的JRocket）
weblogin，商业软件，既可以做web服务器也可以做应用服务器。
websphere，商业软件，同上。
jetty，开源的小框架，可以用Java程序new出来一个服务器，可以集成到测试环境中。
resin，稳定，高性能，http://www.caucho.com，比tomcat快，中文支持很好，现在分Professional版和普通版，Pro版的功能不用就可以不购买license（一般不用）。
tomcat，也是apache软件基金下的开源项目，稳定性不如resin，初学者喜欢用，处理中文不太好，get和post得到的中文编码有差异，需要通过filter处理。
jboss，jboss.org，原来用的是tomcat底层，后来据说自己写了，jboss集成了很多中间件，但似乎一般也不用。
glassfish，sun公司（现在被Oralce收购）自己开发的java应用服务器，速度也不错，但我一直用resin，就没用这个。


4：memcached
分布式缓存和分布式session框架，类似的框架很多，有日本人写的TT，还有别的很多版本。
用它可以存储用户登录的session，这样就可以简单解决分布式session问题，如果只有一台服务器
的情况下，用它来存session，当resin重启后，用户登录状态不变，这也是一个很不错的改善。


5：数据库缓存、事务框架，参考BaseManager.java代码
首先要了解hibernate这个产品，http://www.hibernate.org/，类似的产品有apache下的ibatis，这种ORM产品在10年前就出来了，
用这种产品的好处有下面几个，
a，几乎不用写sql，经过这些产品拼出来的sql已经经过优化
b，全部是面向对象编程，工作效率大大提升
c，很方便用连接池和缓存，性能大大提升
d，如果把数据库从sqlserver切换到mysql或oracle，程序丝毫不用修改，效率可想而知


6：ant
也是apache软件基金下的开源项目，用来编译java文件打包，里面的target可以自己配置，甚至可以用Java自写target，也就是说，
ant想干什么都可以，只要java程序能做到，它就是把一堆繁琐批量的事情配置在一个配置文件里，每次执行同样的操作，在Linux下特别方便。


7：全文检索lucene
全文检索也有一个俄罗斯人写的别的版本，叫sphinx，它和mysql结合的特别好，速度比lucene快，但当时不支持即使更新索引，所以没用，现在可能已经支持了
用lucene中文就有个分词的概念，光分词就可以写一遍很长的论文了。
词在Lucene中的概念就是不可分割的意思，如果把一串字符当成一个词存入Lucene文档，那么就必须整词匹配才能搜索到。
短语分词的技巧就是存索引的时候，拆成一个个汉字，然后搜“兰蔻香水”的时候，通过分词成“兰蔻”“香水”去搜，“兰蔻”不能拆开，“香水”不能拆开，
但“兰蔻”和“香水”可以拆开，也就是说“兰蔻”和“香水”可以挨着也可以不挨着。实际上搜索的时候是搜“兰”“蔻”“香”“水”四个字，
只是认为的定义“兰”“蔻”必须挨着，“香”“水”必须挨着，“兰蔻”和“香水”不必挨着。
这样，不用维护新的词库。比如新增加一个词“给力”，虽然“给力”在词库中没有，但存入的时候反正是当成“给”和“力”存索引的，
只是搜索“给力”的时候，如果“给力”不是词，那么“给”和“力”挨不挨着都能搜出来，如果“给力”在词库中是词，那么必须挨着才能搜出来。
分词也是一门技术，分词的关键在于词库的选择，最大化和最小化，颗粒太细也不行，太粗也不行。比如“九牧王男士休闲牛仔裤”如果是一个词，
那么用户真搜“九牧王男士休闲牛仔裤”时，“九牧王男士休闲牛仔裤”就必须连着，“九牧王2011男士休闲牛仔裤”都搜不出来，这就是颗粒太粗的问题。


8：urlrewrite
Java下一个重写url的开源项目，可以配置正则表达式，他不是跳转，它是直接取目标页面的内容返回，浏览器中的地址不变。
用这个技术可以解决之前商品地址自动跳转的问题，因为在百度和google里面，咱们的商品地址还是之前的。用它也可以做伪
静态处理，d1现在的商品地址看想去像静态的就是用他做的处理。


9：Jquery框架处理前台页面


10：缓存同步问题，触发器示例
create trigger acs_trg_gdsmst
on gdsmst
for insert,update,delete
as 
	declare @pk varchar(128);
begin

  if exists(select 1 from inserted) and not exists(select 1 from deleted)
	begin
		--inserting
		insert into f_access_log(class_name,oper_name,access_id,before_value) 
		select 'com.d1.bean.Product','i',i.gdsmst_gdsid,'gdsmst_rackcode='+cast(isnull(i.gdsmst_rackcode,'') as varchar)+'!@#'+'gdsmst_brand='+cast(isnull(i.gdsmst_brand,'') as varchar)+'!@#' from inserted i;
  end;
  
  if exists(select 1 from inserted) and exists(select 1 from deleted)
  begin
    -- updating
    insert into f_access_log(class_name,oper_name,access_id,before_value,after_value) 
		select 'com.d1.bean.Product','u',i.gdsmst_gdsid,'gdsmst_rackcode='+cast(isnull(d.gdsmst_rackcode,'') as varchar)+'!@#'+'gdsmst_brand='+cast(isnull(d.gdsmst_brand,'') as varchar)+'!@#','gdsmst_rackcode='+cast(isnull(i.gdsmst_rackcode,'') as varchar)+'!@#'+'gdsmst_brand='+cast(isnull(i.gdsmst_brand,'') as varchar)+'!@#' from inserted i,deleted d where i.gdsmst_gdsid=d.gdsmst_gdsid;
  end;
  
  if not exists(select 1 from inserted) and exists(select 1 from deleted)
  begin
    -- deleting
		insert into f_access_log(class_name,oper_name,access_id,before_value) 
		select 'com.d1.bean.Product','d',d.gdsmst_gdsid,'gdsmst_rackcode='+cast(isnull(d.gdsmst_rackcode,'') as varchar)+'!@#'+'gdsmst_brand='+cast(isnull(d.gdsmst_brand,'') as varchar)+'!@#' from deleted d;   
  end;
 
end;


11：页面缓存和搜索缓存，参看CacheFilter.java和SearchManager.java。


12：封装，参看CartHelper.java，任何jsp都可以通过CartHelper获取当前购物车的各种信息。如在任何jsp里用CartHelper.getTotalPayMoney(request,response)就能获得该购物车的总支付价。


13：Linux任务，crontab
30 2 * * * rdate -s stdtime.gov.hk
表示每天凌晨2:30执行rdate -s stdtime.gov.hk
其他的用法可以上网搜索


14：开发注意。并发情况下的线程安全、避免更少的数据读取、修改对象什么时候清除列表缓存、统一
的数据库操作、增加表和字段需要根据前后台读写情况创建触发器、散列字段要配置好。
只提交测试没问题的程序、只up需要更新的程序，不要随意动公用的程序js/css。
浏览器兼容问题要测试好，注重产品体验问题。


15：jvm参数优化，d1的配置
<jvm-arg>-server</jvm-arg>
<jvm-arg>-Xmx6000M</jvm-arg>
<jvm-arg>-Xms6000M</jvm-arg>
<jvm-arg>-Xmn1000M</jvm-arg>
<jvm-arg>-XX:PermSize=300M</jvm-arg>
<jvm-arg>-XX:MaxPermSize=300M</jvm-arg>
<jvm-arg>-XX:+DisableExplicitGC</jvm-arg>
<jvm-arg>-XX:SurvivorRatio=2</jvm-arg>
<jvm-arg>-XX:TargetSurvivorRatio=90</jvm-arg>
<jvm-arg>-XX:MaxTenuringThreshold=3</jvm-arg>
<jvm-arg>-XX:+UseConcMarkSweepGC</jvm-arg>
<jvm-arg>-XX:+UseParNewGC</jvm-arg>
<jvm-arg>-XX:+CMSParallelRemarkEnabled</jvm-arg>
<jvm-arg>-XX:+UseCMSCompactAtFullCollection</jvm-arg>
<jvm-arg>-XX:CMSFullGCsBeforeCompaction=0</jvm-arg>
<jvm-arg>-XX:+CMSClassUnloadingEnabled</jvm-arg>
<jvm-arg>-XX:LargePageSizeInBytes=4M</jvm-arg>
<jvm-arg>-XX:+UseFastAccessorMethods</jvm-arg>
<jvm-arg>-XX:+UseCMSInitiatingOccupancyOnly</jvm-arg>
<jvm-arg>-XX:CMSInitiatingOccupancyFraction=85</jvm-arg>
<jvm-arg>-XX:SoftRefLRUPolicyMSPerMB=0</jvm-arg>
<jvm-arg>-XX:+PrintClassHistogram</jvm-arg>
<jvm-arg>-XX:+PrintGCDetails</jvm-arg>
<jvm-arg>-XX:+PrintGCTimeStamps</jvm-arg>
<jvm-arg>-XX:+PrintHeapAtGC</jvm-arg>
<jvm-arg>-Xloggc:log/gc.log</jvm-arg>

resin配置优化

	  <thread-max>2048</thread-max>

      <!-- Configures the socket timeout -->
      <socket-timeout>15s</socket-timeout>

      <!-- Configures the keepalive -->
      <keepalive-max>512</keepalive-max>
      <keepalive-timeout>15s</keepalive-timeout>


	  <session-config>
        <session-max>204800</session-max>
        <session-timeout>120</session-timeout>
        <enable-cookies>true</enable-cookies>
        <enable-url-rewriting>true</enable-url-rewriting>
      </session-config>
      

17：apache优化
#kk:下面是worker设置，注意:MaxClients<=ServerLimit*ThreadsPerChild
#kk:MaxClients是ThreadsPerChild的整数倍
#kk:MaxSpareThreads>MinSpareThreads+ThreadsPerChild
#kk:MinSpareThreads设置为MaxClients的10%-25%
#kk:MaxSpareThreads设置为MaxClients的25%-50%
<IfModule worker.c>
ServerLimit        100
ThreadLimit        100
StartServers        10
MaxClients       10000
MinSpareThreads   1000
MaxSpareThreads   3000
ThreadsPerChild    100
MaxRequestsPerChild  10000
</IfModule>

<IfModule mod_expires.c>
ExpiresActive On
ExpiresDefault A0
ExpiresByType image/x-icon A2592000
ExpiresByType application/x-javascript A86400
ExpiresByType text/css A86400
ExpiresByType image/gif A2592000
ExpiresByType image/png A2592000
ExpiresByType image/jpeg A2592000
ExpiresByType text/plain A0
ExpiresByType application/x-shockwave-flash A2592000
ExpiresByType video/x-flv A2592000
ExpiresByType application/pdf A2592000
ExpiresByType text/html A0
</IfModule>

<IfModule mod_deflate.c>
 SetOutputFilter DEFLATE
 DeflateCompressionLevel 3
 DeflateFilterNote Input instream
 DeflateFilterNote Output outstream
 DeflateFilterNote Ratio ratio
  
 SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png)$ no-gzip dont-vary
 SetEnvIfNoCase Request_URI \.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary
 SetEnvIfNoCase Request_URI \.pdf$ no-gzip dont-vary
</IfModule>

<VirtualHost *:80>
    DocumentRoot  /opt/d1web
    ServerName d1.cn
    RedirectMatch 301 ^/(.*) http://www.d1.com.cn/$1
</VirtualHost>


18：Linux安全和优化


19：开源项目介绍，www.open-open.com


20：分布式zookeeper、Nosql、hadoop简单介绍